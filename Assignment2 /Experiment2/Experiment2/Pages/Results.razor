@page "/results"
@inject HttpClient Http
@using Experiment2.Models
@using System.Text.Json

<h2>Quiz Results</h2>

@if (quizResults == null)
{
    <p>Loading results...</p>
}
else if (!quizResults.Any())
{
    <p>No results available.</p>
}
else
{
    <div>
        <h3>Participant Details</h3>
        <p>Name: @participantDetails.Name</p>
        <p>Age: @participantDetails.Age</p>
        <p>Sex: @participantDetails.Sex</p>
        <p>Wears Glasses: @(participantDetails.WearsGlasses ? "Yes" : "No")</p>
        <p>Used Maximum Lighting: @(participantDetails.UsedMaximumLighting ? "Yes" : "No")</p>
        <p>Prior Programming Experience: @participantDetails.PriorProgrammingExperience</p>
        <p>Time of Day: @participantDetails.TimeOfDay</p>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Question</th>
                <th>Your Answer</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in quizResults)
            {
                <tr>
                    <td>@result.Question</td>
                    <td>@(result.IsCorrect ? "Correct" : "Incorrect")</td>
                    <td>@result.Score</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<QuizResult> quizResults;
    private ParticipantDetails participantDetails;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("QuizResults.json");
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var resultsData = JsonSerializer.Deserialize<ResultsData>(jsonString);

            quizResults = resultsData?.Questions ?? new List<QuizResult>();
            participantDetails = resultsData?.Participant;
        }
    }

    private class ResultsData
    {
        public List<QuizResult> Questions { get; set; }
        public ParticipantDetails Participant { get; set; }
    }
}
